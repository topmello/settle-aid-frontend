Index: app/(tabs)/index.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { StyleSheet, Appearance, useColorScheme } from \"react-native\";\nimport { Link, Tabs } from \"expo-router\";\nimport { View } from \"react-native\";\nimport { useTranslation } from \"react-i18next\";\nimport { loginUser } from \"../../store/authSlice\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectUserToken } from \"../../store/authSlice\";\nimport { selectAuthStatus } from \"../../store/authSlice\";\nimport { AppDispatch } from \"../../store\";\nimport { Button, Text } from \"react-native-paper\";\nimport { setDarkTheme, setLightTheme, setSystemTheme } from \"../../store/appSlice\";\n\nexport default function TabOneScreen() {\n  const { t } = useTranslation();\n  const dispatch = useDispatch<AppDispatch>();\n  const token = useSelector(selectUserToken);\n  const authStatus = useSelector(selectAuthStatus);\n  const colorScheme = useColorScheme();\n\n  return (\n    <View style={styles.container}>\n      <Text variant=\"headlineMedium\">Tab One</Text>\n      <Text>Translation: {t(\"test:helloWorld\")}</Text>\n      <Link href=\"/Location\">\n        <Button icon=\"routes\" mode=\"contained\">\n          Start Planning\n        </Button>\n      </Link>\n      <Text style={styles.title}>Authentication</Text>\n      <Text>\n        Token here: {token ? token : \"\"}, Status: {authStatus}\n      </Text>\n      <Button  mode=\"contained\"\n        onPress={() =>\n          dispatch(loginUser({ username: \"admin\", password: \"admin\" }))\n        }\n      >\n        Retrive Credential\n      </Button>\n      <Text style={styles.title}>Login Button</Text>\n      <Link href={\"/common/language\"}>\n        <Button mode=\"contained\">\n          Go Language\n        </Button>\n      </Link>\n      <Link href={\"/auth/login\"}>\n        <Button mode=\"contained\" disabled>\n          Go Login\n        </Button>\n      </Link>\n      <Link href={\"/auth/register\"}>\n        <Button mode=\"contained\" disabled>\n          Go Register\n        </Button>\n      </Link>\n      <Text variant=\"headlineMedium\">Color Scheme</Text>\n      <Text>Color Scheme: {colorScheme}</Text>\n      <Button mode=\"contained\" onPress={() => {\n        dispatch(setLightTheme())\n      }}>\n        Light\n      </Button>\n      <Button mode=\"contained\" onPress={() => dispatch(setDarkTheme())}>\n        Dark\n      </Button>\n      <Button mode=\"contained\" onPress={() => dispatch(setSystemTheme())}>\n        Follow System\n      </Button>\n\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: \"bold\",\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: \"80%\",\n  },\n});\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/(tabs)/index.tsx b/app/(tabs)/index.tsx
--- a/app/(tabs)/index.tsx	(revision c7de03c41b14dbcf77c5a985f1e6540e3f68ae02)
+++ b/app/(tabs)/index.tsx	(date 1693464277156)
@@ -9,7 +9,7 @@
 import { AppDispatch } from "../../store";
 import { Button, Text } from "react-native-paper";
 import { setDarkTheme, setLightTheme, setSystemTheme } from "../../store/appSlice";
-
+import {}
 export default function TabOneScreen() {
   const { t } = useTranslation();
   const dispatch = useDispatch<AppDispatch>();
Index: package-lock.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/package-lock.json b/package-lock.json
--- a/package-lock.json	(revision c7de03c41b14dbcf77c5a985f1e6540e3f68ae02)
+++ b/package-lock.json	(date 1693463035129)
@@ -1394,6 +1394,22 @@
         "@babel/core": "^7.0.0-0"
       }
     },
+    "node_modules/@babel/plugin-transform-object-assign": {
+      "version": "7.22.5",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-object-assign/-/plugin-transform-object-assign-7.22.5.tgz",
+      "integrity": "sha512-iDhx9ARkXq4vhZ2CYOSnQXkmxkDgosLi3J8Z17mKz7LyzthtkdVchLD7WZ3aXeCuvJDOW3+1I5TpJmwIbF9MKQ==",
+      "optional": true,
+      "peer": true,
+      "dependencies": {
+        "@babel/helper-plugin-utils": "^7.22.5"
+      },
+      "engines": {
+        "node": ">=6.9.0"
+      },
+      "peerDependencies": {
+        "@babel/core": "^7.0.0-0"
+      }
+    },
     "node_modules/@babel/plugin-transform-object-rest-spread": {
       "version": "7.22.11",
       "resolved": "https://registry.npmjs.org/@babel/plugin-transform-object-rest-spread/-/plugin-transform-object-rest-spread-7.22.11.tgz",
@@ -16348,6 +16364,36 @@
         "color-string": "^1.6.0"
       }
     },
+    "node_modules/react-native-reanimated": {
+      "version": "3.4.2",
+      "resolved": "https://registry.npmjs.org/react-native-reanimated/-/react-native-reanimated-3.4.2.tgz",
+      "integrity": "sha512-FbtG+f1PB005vDTJSv4zAnTK7nNXi+FjFgbAM5gOzIZDajfph2BFMSUstzIsN8T77+OKuugUBmcTqLnQ24EBVg==",
+      "optional": true,
+      "peer": true,
+      "dependencies": {
+        "@babel/plugin-transform-object-assign": "^7.16.7",
+        "@babel/preset-typescript": "^7.16.7",
+        "convert-source-map": "^2.0.0",
+        "invariant": "^2.2.4"
+      },
+      "peerDependencies": {
+        "@babel/core": "^7.0.0-0",
+        "@babel/plugin-proposal-nullish-coalescing-operator": "^7.0.0-0",
+        "@babel/plugin-proposal-optional-chaining": "^7.0.0-0",
+        "@babel/plugin-transform-arrow-functions": "^7.0.0-0",
+        "@babel/plugin-transform-shorthand-properties": "^7.0.0-0",
+        "@babel/plugin-transform-template-literals": "^7.0.0-0",
+        "react": "*",
+        "react-native": "*"
+      }
+    },
+    "node_modules/react-native-reanimated/node_modules/convert-source-map": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/convert-source-map/-/convert-source-map-2.0.0.tgz",
+      "integrity": "sha512-Kvp459HrV2FEJ1CAsi1Ku+MY3kasH19TFykTz2xWmMeq6bk2NU3XXvfJ+Q61m0xktWwt+1HSYf3JZsTms3aRJg==",
+      "optional": true,
+      "peer": true
+    },
     "node_modules/react-native-safe-area-context": {
       "version": "4.6.3",
       "resolved": "https://registry.npmjs.org/react-native-safe-area-context/-/react-native-safe-area-context-4.6.3.tgz",
Index: app/_layout.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import FontAwesome from \"@expo/vector-icons/FontAwesome\";\nimport { lightTheme, darkTheme } from \"../constants/theme\";\nimport { useFonts } from \"expo-font\";\nimport { SplashScreen, Stack } from \"expo-router\";\nimport { useEffect, useMemo } from \"react\";\nimport { useColorScheme } from \"react-native\";\nimport { PaperProvider } from \"react-native-paper\";\nimport i18n from \"i18next\";\nimport { initReactI18next } from \"react-i18next\";\nimport translations from \"../translation\";\nimport {\n  Provider as StoreProvider,\n  useDispatch,\n  useSelector,\n} from \"react-redux\";\nimport store, { AppDispatch } from \"../store\";\nimport { selectTheme, setTheme } from \"../store/appSlice\";\nimport { StatusBar } from \"expo-status-bar\";\n\nexport {\n  // Catch any errors thrown by the Layout component.\n  ErrorBoundary,\n} from \"expo-router\";\n\nexport const unstable_settings = {\n  // Ensure that reloading on `/modal` keeps a back button present.\n  initialRouteName: \"(tabs)\",\n};\n\n// Prevent the splash screen from auto-hiding before asset loading is complete.\nSplashScreen.preventAutoHideAsync();\n\ni18n.use(initReactI18next).init({\n  ns: [\"test\", \"common\", \"account\", \"route\", \"home\", \"tip\"],\n  compatibilityJSON: \"v3\",\n  resources: translations,\n  lng: \"zh-CN\",\n  fallbackLng: \"en-AU\",\n  interpolation: {\n    escapeValue: false,\n  },\n});\n\n/**\n * redux wrapper for the root layout\n * for making the child component able to access the redux store\n */\nexport default function RootLayoutStore() {\n  return (\n    <StoreProvider store={store}>\n      <RootLayout />\n    </StoreProvider>\n  );\n}\n\nexport function RootLayout() {\n  const [loaded, error] = useFonts({\n    SpaceMono: require(\"../assets/fonts/SpaceMono-Regular.ttf\"),\n    ...FontAwesome.font,\n  });\n\n  const colorScheme = useColorScheme();\n  const appTheme = useSelector(selectTheme);\n  const dispatch = useDispatch<AppDispatch>();\n\n  useEffect(() => {\n    if (colorScheme === \"dark\") {\n      dispatch(setTheme({ theme: \"dark\"}));\n    } else {\n      dispatch(setTheme({ theme: \"dark\"}));\n    }\n  }, [colorScheme]);\n\n  const theme = useMemo(() => {\n    switch (appTheme) {\n      case \"light\":\n        return lightTheme;\n      case \"dark\":\n        return darkTheme;\n      default:\n        if (colorScheme === \"dark\") {\n          return darkTheme;\n        } else {\n          return lightTheme;\n        }\n    }\n  }, [appTheme, colorScheme]);\n\n  // Expo Router uses Error Boundaries to catch errors in the navigation tree.\n  useEffect(() => {\n    if (error) throw error;\n  }, [error]);\n\n  useEffect(() => {\n    if (loaded) {\n      SplashScreen.hideAsync();\n    }\n  }, [loaded]);\n\n  if (!loaded) {\n    return null;\n  }\n\n  return (\n    <PaperProvider theme={theme}>\n      <StatusBar style={theme.dark ? \"light\" : \"dark\"} />\n      <Stack>\n        <Stack.Screen name=\"(tabs)\" options={{ headerShown: false }} />\n        <Stack.Screen name=\"modal\" options={{ presentation: \"modal\" }} />\n        <Stack.Screen name=\"locale\" options={{ headerShown: false }} />\n      </Stack>\n    </PaperProvider>\n  );\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/_layout.tsx b/app/_layout.tsx
--- a/app/_layout.tsx	(revision c7de03c41b14dbcf77c5a985f1e6540e3f68ae02)
+++ b/app/_layout.tsx	(date 1693448666551)
@@ -1,5 +1,5 @@
 import FontAwesome from "@expo/vector-icons/FontAwesome";
-import { lightTheme, darkTheme } from "../constants/theme";
+import { lightTheme, darkTheme } from "../theme/theme";
 import { useFonts } from "expo-font";
 import { SplashScreen, Stack } from "expo-router";
 import { useEffect, useMemo } from "react";
Index: translation/en-AU.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\n  \"translation\": {\n    \n  },\"test\": {\n    \"helloWorld\": \"Hello World\"\n  },\n  \"common\": {\n\n  },\n  \"account\": {\n\n  },\n  \"route\": {\n\n  },\n  \"home\": {\n\n  },\n  \"tip\": {\n    \n  }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/translation/en-AU.json b/translation/en-AU.json
--- a/translation/en-AU.json	(revision c7de03c41b14dbcf77c5a985f1e6540e3f68ae02)
+++ b/translation/en-AU.json	(date 1693458237962)
@@ -14,8 +14,14 @@
 
   },
   "home": {
-
-  },
+    "title": "Discover Melbourne",
+    "startTitle": "Start Here",
+    "startCard": "Embrace Melbourne",
+    "startCardInfo": "Plan your travel route with one click",
+    "historyTitle":"Routine History",
+    "more": "More"
+  }
+,
   "tip": {
     
   }
